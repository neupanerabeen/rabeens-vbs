{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport InternalAnimatedValue from \"./InternalAnimatedValue\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport { val } from \"../val\";\n\nvar AnimatedMainClock = function (_InternalAnimatedValu) {\n  _inherits(AnimatedMainClock, _InternalAnimatedValu);\n\n  var _super = _createSuper(AnimatedMainClock);\n\n  function AnimatedMainClock() {\n    var _this;\n\n    _classCallCheck(this, AnimatedMainClock);\n\n    _this = _super.call(this, {\n      type: 'MAIN_CLOCK'\n    });\n\n    _this._runFrame = function () {\n      _this._updateValue(0);\n\n      if (_this.__children.length > 0) {\n        _this._frameCallback = requestAnimationFrame(_this._runFrame);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(AnimatedMainClock, [{\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return +new Date();\n    }\n  }, {\n    key: \"__attach\",\n    value: function __attach() {\n      _get(_getPrototypeOf(AnimatedMainClock.prototype), \"__attach\", this).call(this);\n\n      if (!this._frameCallback) {\n        this._frameCallback = requestAnimationFrame(this._runFrame);\n      }\n    }\n  }, {\n    key: \"__detach\",\n    value: function __detach() {\n      if (this._frameCallback) {\n        cancelAnimationFrame(this._frameCallback);\n        this._frameCallback = null;\n      }\n\n      _get(_getPrototypeOf(AnimatedMainClock.prototype), \"__detach\", this).call(this);\n    }\n  }]);\n\n  return AnimatedMainClock;\n}(InternalAnimatedValue);\n\nvar mainClock = new AnimatedMainClock();\n\nvar AnimatedClock = function (_AnimatedNode) {\n  _inherits(AnimatedClock, _AnimatedNode);\n\n  var _super2 = _createSuper(AnimatedClock);\n\n  function AnimatedClock() {\n    _classCallCheck(this, AnimatedClock);\n\n    return _super2.call(this, {\n      type: 'clock'\n    });\n  }\n\n  _createClass(AnimatedClock, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedClock, id: \" + this.__nodeID;\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return val(mainClock);\n    }\n  }, {\n    key: \"__attach\",\n    value: function __attach() {\n      _get(_getPrototypeOf(AnimatedClock.prototype), \"__attach\", this).call(this);\n\n      if (this._started && !this._attached) {\n        mainClock.__addChild(this);\n      }\n\n      this._attached = true;\n    }\n  }, {\n    key: \"__detach\",\n    value: function __detach() {\n      if (this._started && this._attached) {\n        mainClock.__removeChild(this);\n      }\n\n      this._attached = false;\n\n      _get(_getPrototypeOf(AnimatedClock.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (!this._started && this._attached) {\n        mainClock.__addChild(this);\n      }\n\n      this._started = true;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this._started && this._attached) {\n        mainClock.__removeChild(this);\n      }\n\n      this._started = false;\n    }\n  }, {\n    key: \"isStarted\",\n    value: function isStarted() {\n      return this._started;\n    }\n  }]);\n\n  return AnimatedClock;\n}(AnimatedNode);\n\nexport { AnimatedClock as default };","map":null,"metadata":{},"sourceType":"module"}