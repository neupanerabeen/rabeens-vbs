{"ast":null,"code":"import EasingNode from \"../reanimated1/Easing\";\nimport { Bezier } from \"./Bezier\";\n\nfunction linear(t) {\n  'worklet';\n\n  return t;\n}\n\nfunction ease(t) {\n  'worklet';\n\n  return Bezier(0.42, 0, 1, 1)(t);\n}\n\nfunction quad(t) {\n  'worklet';\n\n  return t * t;\n}\n\nfunction cubic(t) {\n  'worklet';\n\n  return t * t * t;\n}\n\nfunction poly(n) {\n  'worklet';\n\n  return function (t) {\n    return Math.pow(t, n);\n  };\n}\n\nfunction sin(t) {\n  'worklet';\n\n  return 1 - Math.cos(t * Math.PI / 2);\n}\n\nfunction circle(t) {\n  'worklet';\n\n  return 1 - Math.sqrt(1 - t * t);\n}\n\nfunction exp(t) {\n  'worklet';\n\n  return Math.pow(2, 10 * (t - 1));\n}\n\nfunction elastic() {\n  'worklet';\n\n  var bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  var p = bounciness * Math.PI;\n  return function (t) {\n    'worklet';\n\n    return 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);\n  };\n}\n\nfunction back() {\n  'worklet';\n\n  var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.70158;\n  return function (t) {\n    return t * t * ((s + 1) * t - s);\n  };\n}\n\nfunction bounce(t) {\n  'worklet';\n\n  if (t < 1 / 2.75) {\n    return 7.5625 * t * t;\n  }\n\n  if (t < 2 / 2.75) {\n    var _t = t - 1.5 / 2.75;\n\n    return 7.5625 * _t * _t + 0.75;\n  }\n\n  if (t < 2.5 / 2.75) {\n    var _t2 = t - 2.25 / 2.75;\n\n    return 7.5625 * _t2 * _t2 + 0.9375;\n  }\n\n  var t2 = t - 2.625 / 2.75;\n  return 7.5625 * t2 * t2 + 0.984375;\n}\n\nfunction bezier(x1, y1, x2, y2) {\n  'worklet';\n\n  return Bezier(x1, y1, x2, y2);\n}\n\nfunction in_(easing) {\n  'worklet';\n\n  return easing;\n}\n\nfunction out(easing) {\n  'worklet';\n\n  return function (t) {\n    'worklet';\n\n    return 1 - easing(1 - t);\n  };\n}\n\nfunction inOut(easing) {\n  'worklet';\n\n  return function (t) {\n    'worklet';\n\n    if (t < 0.5) {\n      return easing(t * 2) / 2;\n    }\n\n    return 1 - easing((1 - t) * 2) / 2;\n  };\n}\n\nvar EasingObject = {\n  linear: linear,\n  ease: ease,\n  quad: quad,\n  cubic: cubic,\n  poly: poly,\n  sin: sin,\n  circle: circle,\n  exp: exp,\n  elastic: elastic,\n  back: back,\n  bounce: bounce,\n  bezier: bezier,\n  in: in_,\n  out: out,\n  inOut: inOut\n};\n\nfunction createChecker(worklet, workletName, prevArgs) {\n  function checkIfReaOne() {\n    'worklet';\n\n    if (arguments && !_WORKLET) {\n      for (var i = 0; i < arguments.length; i++) {\n        var arg = arguments[i];\n\n        if (arg && arg.__nodeID) {\n          console.warn(\"Easing was renamed to EasingNode in Reanimated 2. Please use EasingNode instead\");\n\n          if (prevArgs) {\n            return EasingNode[workletName].apply(undefined, prevArgs).apply(undefined, arguments);\n          }\n\n          return EasingNode[workletName].apply(undefined, arguments);\n        }\n      }\n    }\n\n    var res = worklet.apply(this, arguments);\n\n    if (!_WORKLET && res && typeof res === 'function' && res.__worklet) {\n      return createChecker(res, workletName, arguments);\n    }\n\n    return res;\n  }\n\n  checkIfReaOne._closure = worklet._closure;\n  checkIfReaOne.asString = worklet.asString;\n  checkIfReaOne.__workletHash = worklet.__workletHash;\n  checkIfReaOne.__location = worklet.__location;\n  return checkIfReaOne;\n}\n\nObject.keys(EasingObject).forEach(function (key) {\n  EasingObject[key] = createChecker(EasingObject[key], key);\n});\nexport var Easing = EasingObject;","map":null,"metadata":{},"sourceType":"module"}