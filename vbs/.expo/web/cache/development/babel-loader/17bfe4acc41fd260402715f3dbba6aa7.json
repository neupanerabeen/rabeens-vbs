{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport AnimatedNode, { getCallID, setCallID } from \"./AnimatedNode\";\nimport { adapt } from \"./AnimatedBlock\";\nimport { val } from \"../val\";\nimport invariant from 'fbjs/lib/invariant';\n\nvar AnimatedCallFunc = function (_AnimatedNode) {\n  _inherits(AnimatedCallFunc, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedCallFunc);\n\n  function AnimatedCallFunc(what, args, params) {\n    var _this;\n\n    _classCallCheck(this, AnimatedCallFunc);\n\n    invariant(what instanceof AnimatedNode, \"Reanimated: AnimatedCallFunc 'what' argument should be of type AnimatedNode but got \" + what);\n    invariant(args.every(function (el) {\n      return el instanceof AnimatedNode;\n    }), \"Reanimated: every AnimatedCallFunc 'args' argument should be of type AnimatedNode but got \" + args);\n    invariant(params.every(function (el) {\n      return el instanceof AnimatedNode;\n    }), \"Reanimated: every AnimatedCallFunc 'params' argument should be of type AnimatedNode but got \" + params);\n    _this = _super.call(this, {\n      type: 'callfunc',\n      what: what,\n      args: args,\n      params: params\n    }, _toConsumableArray(args));\n    _this._what = what;\n    _this._args = args;\n    _this._params = params;\n    return _this;\n  }\n\n  _createClass(AnimatedCallFunc, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedCallFunc, id: \" + this.__nodeID;\n    }\n  }, {\n    key: \"beginContext\",\n    value: function beginContext() {\n      var _this2 = this;\n\n      this._previousCallID = getCallID();\n      setCallID(getCallID() + '/' + this.__nodeID);\n\n      this._params.forEach(function (param, index) {\n        param.beginContext(_this2._args[index], _this2._previousCallID);\n      });\n    }\n  }, {\n    key: \"endContext\",\n    value: function endContext() {\n      this._params.forEach(function (param) {\n        param.endContext();\n      });\n\n      setCallID(this._previousCallID);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      this.beginContext();\n      var value = val(this._what);\n      this.endContext();\n      return value;\n    }\n  }]);\n\n  return AnimatedCallFunc;\n}(AnimatedNode);\n\nexport function createAnimatedCallFunc(proc, args, params) {\n  return new AnimatedCallFunc(proc, args.map(function (p) {\n    return adapt(p);\n  }), params);\n}","map":null,"metadata":{},"sourceType":"module"}