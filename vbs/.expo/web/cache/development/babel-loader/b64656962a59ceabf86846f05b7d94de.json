{"ast":null,"code":"'use strict';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { forwardRef, memo, useMemo, useState, useRef } from 'react';\nimport useMergeRefs from \"../../modules/useMergeRefs\";\nimport usePressEvents from \"../../hooks/usePressEvents\";\nimport View from \"../View\";\n\nfunction Pressable(props, forwardedRef) {\n  var accessible = props.accessible,\n      children = props.children,\n      delayLongPress = props.delayLongPress,\n      delayPressIn = props.delayPressIn,\n      delayPressOut = props.delayPressOut,\n      disabled = props.disabled,\n      focusable = props.focusable,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      onLongPress = props.onLongPress,\n      onPress = props.onPress,\n      onPressMove = props.onPressMove,\n      onPressIn = props.onPressIn,\n      onPressOut = props.onPressOut,\n      style = props.style,\n      testOnly_pressed = props.testOnly_pressed,\n      rest = _objectWithoutPropertiesLoose(props, [\"accessible\", \"children\", \"delayLongPress\", \"delayPressIn\", \"delayPressOut\", \"disabled\", \"focusable\", \"onBlur\", \"onFocus\", \"onLongPress\", \"onPress\", \"onPressMove\", \"onPressIn\", \"onPressOut\", \"style\", \"testOnly_pressed\"]);\n\n  var _useForceableState = useForceableState(false),\n      focused = _useForceableState[0],\n      setFocused = _useForceableState[1];\n\n  var _useForceableState2 = useForceableState(testOnly_pressed === true),\n      pressed = _useForceableState2[0],\n      setPressed = _useForceableState2[1];\n\n  var hostRef = useRef(null);\n  var setRef = useMergeRefs(forwardedRef, hostRef);\n  var pressConfig = useMemo(function () {\n    return {\n      delayLongPress: delayLongPress,\n      delayPressStart: delayPressIn,\n      delayPressEnd: delayPressOut,\n      disabled: disabled,\n      onLongPress: onLongPress,\n      onPress: onPress,\n      onPressChange: setPressed,\n      onPressStart: onPressIn,\n      onPressMove: onPressMove,\n      onPressEnd: onPressOut\n    };\n  }, [delayLongPress, delayPressIn, delayPressOut, disabled, onLongPress, onPress, onPressIn, onPressMove, onPressOut, setPressed]);\n  var pressEventHandlers = usePressEvents(hostRef, pressConfig);\n\n  var accessibilityState = _objectSpread({\n    disabled: disabled\n  }, props.accessibilityState);\n\n  var interactionState = {\n    focused: focused,\n    pressed: pressed\n  };\n\n  function createFocusHandler(callback, value) {\n    return function (event) {\n      if (event.nativeEvent.target === hostRef.current) {\n        setFocused(value);\n\n        if (callback != null) {\n          callback(event);\n        }\n      }\n    };\n  }\n\n  return React.createElement(View, _extends({}, rest, pressEventHandlers, {\n    accessibilityState: accessibilityState,\n    accessible: accessible !== false,\n    focusable: focusable !== false,\n    onBlur: createFocusHandler(onBlur, false),\n    onFocus: createFocusHandler(onFocus, true),\n    ref: setRef,\n    style: typeof style === 'function' ? style(interactionState) : style\n  }), typeof children === 'function' ? children(interactionState) : children);\n}\n\nfunction useForceableState(forced) {\n  var _useState = useState(false),\n      pressed = _useState[0],\n      setPressed = _useState[1];\n\n  return [pressed || forced, setPressed];\n}\n\nvar MemoedPressable = memo(forwardRef(Pressable));\nMemoedPressable.displayName = 'Pressable';\nexport default MemoedPressable;","map":null,"metadata":{},"sourceType":"module"}