{"ast":null,"code":"import { createAnimatedPropAdapter } from \"./core\";\nexport var SVGAdapter = createAnimatedPropAdapter(function (props) {\n  'worklet';\n\n  var _a, _b;\n\n  var keys = Object.keys(props);\n\n  if (keys.includes('transform')) {\n    if (Array.isArray(props.transform)) {\n      if (props.transform.length !== 6) {\n        throw new Error(\"invalid transform length of \" + props.transform.length + \", should be 6\");\n      }\n\n      var transform = props.transform;\n      var x = (_a = props.x) !== null && _a !== void 0 ? _a : 0;\n      var y = (_b = props.y) !== null && _b !== void 0 ? _b : 0;\n      props.transform = [{\n        translateX: transform[0] * x + transform[2] * y + transform[4]\n      }, {\n        translateY: transform[1] * x + transform[3] * y + transform[5]\n      }];\n    } else if (typeof props.transform === 'string') {\n      var arr = props.transform.replace('translate(', '').replace(')', '').split(' ');\n      props.transform = [{\n        translateX: parseFloat(arr[0])\n      }, {\n        translateY: parseFloat(arr[1])\n      }];\n    }\n  }\n});\nexport var TextInputAdapter = createAnimatedPropAdapter(function (props) {\n  'worklet';\n\n  var keys = Object.keys(props);\n\n  if (keys.includes('value')) {\n    props.text = props.value;\n    delete props.value;\n  }\n}, ['text']);","map":null,"metadata":{},"sourceType":"module"}