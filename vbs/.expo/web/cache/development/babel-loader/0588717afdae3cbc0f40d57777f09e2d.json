{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar MapperRegistry = function () {\n  function MapperRegistry(module) {\n    _classCallCheck(this, MapperRegistry);\n\n    this.sortedMappers = [];\n    this.mappers = new Map();\n    this.updatedSinceLastExecute = false;\n    this._module = module;\n  }\n\n  _createClass(MapperRegistry, [{\n    key: \"startMapper\",\n    value: function startMapper(mapper) {\n      this.mappers.set(mapper.id, mapper);\n      this.updatedSinceLastExecute = true;\n      return mapper.id;\n    }\n  }, {\n    key: \"stopMapper\",\n    value: function stopMapper(id) {\n      this.mappers.delete(id);\n      this.updatedSinceLastExecute = true;\n    }\n  }, {\n    key: \"execute\",\n    value: function execute() {\n      if (this.updatedSinceLastExecute) {\n        this.updateOrder();\n        this.updatedSinceLastExecute = false;\n      }\n\n      for (var i = 0, len = this.sortedMappers.length; i < len; ++i) {\n        var mapper = this.sortedMappers[i];\n\n        if (mapper.dirty) {\n          mapper.execute();\n        }\n      }\n    }\n  }, {\n    key: \"updateOrder\",\n    value: function updateOrder() {\n      var nodes = _toConsumableArray(this.mappers.values()).map(function (mapper) {\n        return new Node(mapper);\n      });\n\n      var mappersById = {};\n      this.mappers.forEach(function (mapper) {\n        mappersById[mapper.id] = mapper;\n      });\n\n      for (var i = 0, nodesLen = nodes.length; i < nodesLen; ++i) {\n        var node = nodes[i];\n\n        if (node.mapper.outputs.length === 0) {\n          continue;\n        }\n\n        for (var j = 0; j < nodesLen; ++j) {\n          var restNode = nodes[j];\n\n          if (i === j || restNode.mapper.inputs.length === 0) {\n            continue;\n          }\n\n          for (var outi = 0, outputsLen = node.mapper.outputs.length; outi < outputsLen; ++outi) {\n            for (var resti = 0, restLen = restNode.mapper.inputs.length; resti < restLen; ++resti) {\n              if (node.mapper.outputs[outi]._id === restNode.mapper.inputs[resti]._id) {\n                node.children.push(restNode);\n              }\n            }\n          }\n        }\n      }\n\n      var post = {};\n      var postCounter = 1;\n\n      var dfs = function dfs(node) {\n        var index = nodes.indexOf(node);\n\n        if (index === -1) {\n          return;\n        }\n\n        ++postCounter;\n        nodes.splice(index, 1);\n\n        if (node.children.length === 0 && nodes.length > 0) {\n          post[node.mapper.id] = postCounter++;\n          dfs(nodes[0]);\n          return;\n        }\n\n        for (var _i = 0, len = node.children.length; _i < len; ++_i) {\n          dfs(node.children[_i]);\n        }\n\n        post[node.mapper.id] = postCounter++;\n      };\n\n      while (nodes.length) {\n        dfs(nodes[0]);\n      }\n\n      var postArray = Object.keys(post).map(function (key) {\n        return [key, post[key]];\n      });\n      postArray.sort(function (a, b) {\n        return b[1] - a[1];\n      });\n      this.sortedMappers = [];\n\n      for (var _i2 = 0, len = postArray.length; _i2 < len; ++_i2) {\n        var _postArray$_i = _slicedToArray(postArray[_i2], 1),\n            id = _postArray$_i[0];\n\n        this.sortedMappers.push(mappersById[id]);\n      }\n    }\n  }, {\n    key: \"needRunOnRender\",\n    get: function get() {\n      return this.updatedSinceLastExecute;\n    }\n  }]);\n\n  return MapperRegistry;\n}();\n\nexport { MapperRegistry as default };\n\nvar Node = function Node(mapper) {\n  var _parents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  _classCallCheck(this, Node);\n\n  this.mapper = null;\n  this.children = [];\n  this.mapper = mapper;\n  this.children = children;\n};","map":null,"metadata":{},"sourceType":"module"}