{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport AppContainer from \"./AppContainer\";\nimport invariant from 'fbjs/lib/invariant';\nimport render, { hydrate } from \"../render\";\nimport styleResolver from \"../StyleSheet/styleResolver\";\nimport React from 'react';\nexport default function renderApplication(RootComponent, WrapperComponent, callback, options) {\n  var shouldHydrate = options.hydrate,\n      initialProps = options.initialProps,\n      rootTag = options.rootTag;\n  var renderFn = shouldHydrate ? hydrate : render;\n  invariant(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);\n  renderFn(React.createElement(AppContainer, {\n    rootTag: rootTag,\n    WrapperComponent: WrapperComponent\n  }, React.createElement(RootComponent, initialProps)), rootTag, callback);\n}\nexport function getApplication(RootComponent, initialProps, WrapperComponent) {\n  var element = React.createElement(AppContainer, {\n    rootTag: {},\n    WrapperComponent: WrapperComponent\n  }, React.createElement(RootComponent, initialProps));\n\n  var getStyleElement = function getStyleElement(props) {\n    var sheet = styleResolver.getStyleSheet();\n    return React.createElement(\"style\", _extends({}, props, {\n      dangerouslySetInnerHTML: {\n        __html: sheet.textContent\n      },\n      id: sheet.id\n    }));\n  };\n\n  return {\n    element: element,\n    getStyleElement: getStyleElement\n  };\n}","map":null,"metadata":{},"sourceType":"module"}