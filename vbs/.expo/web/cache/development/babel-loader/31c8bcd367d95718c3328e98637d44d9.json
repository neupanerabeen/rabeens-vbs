{"ast":null,"code":"'use strict';\n\nimport NativeAnimatedHelper from \"../NativeAnimatedHelper\";\nimport invariant from 'fbjs/lib/invariant';\nvar NativeAnimatedAPI = NativeAnimatedHelper.API;\nvar _uniqueId = 1;\n\nvar AnimatedNode = function () {\n  var _proto = AnimatedNode.prototype;\n\n  _proto.__attach = function __attach() {};\n\n  _proto.__detach = function __detach() {\n    if (this.__isNative && this.__nativeTag != null) {\n      NativeAnimatedHelper.API.dropAnimatedNode(this.__nativeTag);\n      this.__nativeTag = undefined;\n    }\n  };\n\n  _proto.__getValue = function __getValue() {};\n\n  _proto.__getAnimatedValue = function __getAnimatedValue() {\n    return this.__getValue();\n  };\n\n  _proto.__addChild = function __addChild(child) {};\n\n  _proto.__removeChild = function __removeChild(child) {};\n\n  _proto.__getChildren = function __getChildren() {\n    return [];\n  };\n\n  function AnimatedNode() {\n    this._listeners = {};\n  }\n\n  _proto.__makeNative = function __makeNative() {\n    if (!this.__isNative) {\n      throw new Error('This node cannot be made a \"native\" animated node');\n    }\n\n    if (this.hasListeners()) {\n      this._startListeningToNativeValueUpdates();\n    }\n  };\n\n  _proto.addListener = function addListener(callback) {\n    var id = String(_uniqueId++);\n    this._listeners[id] = callback;\n\n    if (this.__isNative) {\n      this._startListeningToNativeValueUpdates();\n    }\n\n    return id;\n  };\n\n  _proto.removeListener = function removeListener(id) {\n    delete this._listeners[id];\n\n    if (this.__isNative && !this.hasListeners()) {\n      this._stopListeningForNativeValueUpdates();\n    }\n  };\n\n  _proto.removeAllListeners = function removeAllListeners() {\n    this._listeners = {};\n\n    if (this.__isNative) {\n      this._stopListeningForNativeValueUpdates();\n    }\n  };\n\n  _proto.hasListeners = function hasListeners() {\n    return !!Object.keys(this._listeners).length;\n  };\n\n  _proto._startListeningToNativeValueUpdates = function _startListeningToNativeValueUpdates() {\n    var _this = this;\n\n    if (this.__nativeAnimatedValueListener && !this.__shouldUpdateListenersForNewNativeTag) {\n      return;\n    }\n\n    if (this.__shouldUpdateListenersForNewNativeTag) {\n      this.__shouldUpdateListenersForNewNativeTag = false;\n\n      this._stopListeningForNativeValueUpdates();\n    }\n\n    NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());\n    this.__nativeAnimatedValueListener = NativeAnimatedHelper.nativeEventEmitter.addListener('onAnimatedValueUpdate', function (data) {\n      if (data.tag !== _this.__getNativeTag()) {\n        return;\n      }\n\n      _this._onAnimatedValueUpdateReceived(data.value);\n    });\n  };\n\n  _proto._onAnimatedValueUpdateReceived = function _onAnimatedValueUpdateReceived(value) {\n    this.__callListeners(value);\n  };\n\n  _proto.__callListeners = function __callListeners(value) {\n    for (var _key in this._listeners) {\n      this._listeners[_key]({\n        value: value\n      });\n    }\n  };\n\n  _proto._stopListeningForNativeValueUpdates = function _stopListeningForNativeValueUpdates() {\n    if (!this.__nativeAnimatedValueListener) {\n      return;\n    }\n\n    this.__nativeAnimatedValueListener.remove();\n\n    this.__nativeAnimatedValueListener = null;\n    NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());\n  };\n\n  _proto.__getNativeTag = function __getNativeTag() {\n    NativeAnimatedHelper.assertNativeAnimatedModule();\n    invariant(this.__isNative, 'Attempt to get native tag from node not marked as \"native\"');\n\n    if (this.__nativeTag == null) {\n      var nativeTag = NativeAnimatedHelper.generateNewNodeTag();\n      this.__nativeTag = nativeTag;\n      NativeAnimatedHelper.API.createAnimatedNode(nativeTag, this.__getNativeConfig());\n      this.__shouldUpdateListenersForNewNativeTag = true;\n    }\n\n    return this.__nativeTag;\n  };\n\n  _proto.__getNativeConfig = function __getNativeConfig() {\n    throw new Error('This JS animated node type cannot be used as native animated node');\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.__getValue();\n  };\n\n  return AnimatedNode;\n}();\n\nexport default AnimatedNode;","map":null,"metadata":{},"sourceType":"module"}