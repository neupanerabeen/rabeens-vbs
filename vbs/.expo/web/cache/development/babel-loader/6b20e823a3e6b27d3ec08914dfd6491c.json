{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/rabeen/personal/rabeens-vbs/ui/components/BookVehicle.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { Picker } from '@react-native-community/picker';\nimport { APP_CONFIG } from \"../helpers/config\";\nimport { DateTime } from \"./DateTime\";\nvar fields = [{\n  title: \"Purpose of travel\",\n  inputType: \"text\",\n  keyLabel: \"purpose\",\n  required: true\n}, {\n  title: \"Start date\",\n  inputType: \"date\",\n  keyLabel: \"startDateRequest\",\n  mode: \"date\",\n  minimumDate: APP_CONFIG.minBookStartDaysDelta,\n  maximumDate: APP_CONFIG.minBookEndDaysDelta,\n  required: true\n}, {\n  title: \"End date\",\n  inputType: \"date\",\n  keyLabel: \"endDateRequest\",\n  mode: \"date\",\n  minimumDate: APP_CONFIG.minBookStartDaysDelta,\n  maximumDate: APP_CONFIG.minBookEndDaysDelta,\n  required: true\n}, {\n  title: \"Travel Source\",\n  inputType: \"text\",\n  keyLabel: \"travelSource\",\n  required: true\n}, {\n  title: \"Travel Destination\",\n  inputType: \"text\",\n  keyLabel: \"travelDestination\",\n  required: true\n}, {\n  title: \"Expected Travel Route\",\n  inputType: \"text\",\n  keyLabel: \"expectedTravelRoute\"\n}, {\n  title: \"Expected Travel Distance\",\n  inputType: \"number\",\n  keyLabel: \"expectedTravelDistance\"\n}, {\n  title: \"Is Driver required?\",\n  inputType: \"options\",\n  keyLabel: \"isDriverRequired\",\n  options: [\"Yes\", \"No\"],\n  required: true\n}, {\n  title: \"Number of passangers\",\n  inputType: \"number\",\n  keyLabel: \"numOfPassangers\",\n  minimum: 1,\n  maximum: 5,\n  required: true\n}, {\n  title: \"Name of passanger 1\",\n  inputType: \"text\",\n  keyLabel: \"namePassanger1\"\n}, {\n  title: \"Name of passanger 2\",\n  inputType: \"text\",\n  keyLabel: \"namePassanger2\"\n}, {\n  title: \"Name of passanger 3\",\n  inputType: \"text\",\n  keyLabel: \"namePassanger3\"\n}, {\n  title: \"Name of passanger 4\",\n  inputType: \"text\",\n  keyLabel: \"namePassanger4\"\n}, {\n  title: \"Name of passanger 5\",\n  inputType: \"text\",\n  keyLabel: \"namePassanger5\"\n}];\n\nvar addTimeDays = function addTimeDays(numOfDays) {\n  var myCurrentDate = new Date();\n  var myFutureDate = new Date(myCurrentDate);\n  myFutureDate.setDate(myFutureDate.getDate() + numOfDays);\n  return myFutureDate;\n};\n\nexport var BookVehicle = function BookVehicle() {\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      data = _React$useState2[0],\n      setData = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      loading = _React$useState4[0],\n      setLoading = _React$useState4[1];\n\n  var validate = function validate() {\n    return true;\n  };\n\n  var submitRequest = function submitRequest() {\n    setLoading(true);\n    fetch(APP_CONFIG.api_path + \"/\", {\n      \"ContentType\": \"application/json\",\n      \"Authentication\": \"Bearer token\",\n      method: \"POST\",\n      data: JSON.stringify(data)\n    }).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      setLoading(false);\n\n      if (res.status === 200) {\n        alert(res.msg);\n      } else if (res.status === 401) {} else {\n        alert(\"Failed\");\n      }\n    }).catch(function (err) {\n      alert(\"Failed to book your request!\");\n      setLoading(false);\n    });\n  };\n\n  if (loading === true) {\n    return React.createElement(View, {\n      style: {\n        flex: 1,\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 16\n      }\n    }, React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }\n    }, \"Please wait...\"));\n  }\n\n  var get_input_field = function get_input_field(field) {\n    if (field.inputType === undefined) {\n      return null;\n    }\n\n    if (field.inputType.toLowerCase() === \"text\") {\n      return React.createElement(TextInput, {\n        style: styles.formUnitInput,\n        placeholder: field.title,\n        value: data[field.keyLabel],\n        defaultValue: data[field.keyLabel],\n        onChangeText: function onChangeText(e) {\n          setData(_objectSpread(_objectSpread({}, data), {}, _defineProperty({}, field.keyLabel, e)));\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 20\n        }\n      });\n    } else if (field.inputType.toLowerCase() === \"number\") {\n      return React.createElement(TextInput, {\n        style: styles.formUnitInput,\n        keyboardType: \"number-pad\",\n        placeholder: field.title,\n        value: data[field.keyLabel],\n        defaultValue: data[field.keyLabel],\n        onChangeText: function onChangeText(e) {\n          if (e === \"\") {\n            setData(_objectSpread(_objectSpread({}, data), {}, _defineProperty({}, field.keyLabel, null)));\n            return;\n          }\n\n          if (field.maximum && parseInt(field.maximum) < parseInt(e)) {\n            setData(_objectSpread(_objectSpread({}, data), {}, _defineProperty({}, field.keyLabel, \"5\")));\n            return;\n          }\n\n          if (field.minimum && parseInt(field.minimum) > parseInt(e)) {\n            setData(_objectSpread(_objectSpread({}, data), {}, _defineProperty({}, field.keyLabel, \"1\")));\n            return;\n          }\n\n          setData(_objectSpread(_objectSpread({}, data), {}, _defineProperty({}, field.keyLabel, e)));\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 20\n        }\n      });\n    } else if (field.inputType.toLowerCase() === \"options\") {\n      return React.createElement(Picker, {\n        style: styles.formUnitInput,\n        selectedValue: data[field.keyLabel],\n        status: \"checked\",\n        onValueChange: function onValueChange(e) {\n          setData(_objectSpread(_objectSpread({}, data), {}, _defineProperty({}, field.keyLabel, e)));\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 20\n        }\n      }, field.options !== undefined ? field.options.map(function (option, opt_index) {\n        return React.createElement(Picker.Item, {\n          key: opt_index,\n          label: option,\n          value: option,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 36\n          }\n        });\n      }) : [\"Yes\", \"No\"].map(function (option, opt_index) {\n        return React.createElement(Picker.Item, {\n          key: opt_index,\n          label: option,\n          value: option,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 32\n          }\n        });\n      }));\n    } else if (field.inputType.toLowerCase() === \"date\") {\n      var _selected_date = data[field.keyLabel];\n\n      var _minimumDate = field.minimumDate ? addTimeDays(field.minimumDate) : null;\n\n      var _maximumDate = field.maximumDate ? addTimeDays(field.maximumDate) : null;\n\n      return React.createElement(DateTime, {\n        style: styles.formUnitInput,\n        value: _selected_date,\n        mode: field.mode || \"date\",\n        minimumDate: _minimumDate,\n        maximumDate: _maximumDate,\n        setDate: function setDate(e) {\n          setData(_objectSpread(_objectSpread({}, data), {}, _defineProperty({}, field.keyLabel, e)));\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 20\n        }\n      });\n    } else {\n      return null;\n    }\n  };\n\n  return React.createElement(ScrollView, {\n    style: styles.box,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 12\n    }\n  }, fields.map(function (field, counter) {\n    return React.createElement(View, {\n      style: styles.formUnit,\n      key: counter,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 28\n      }\n    }, React.createElement(Text, {\n      style: styles.formUnitTitle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 25\n      }\n    }, field.title || \"\", field.required ? React.createElement(Text, {\n      style: styles.formUnitRequiredTitle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 37\n      }\n    }, \"*\") : null), get_input_field(field));\n  }), React.createElement(View, {\n    style: styles.submitBtnWrapper,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 13\n    }\n  }, React.createElement(Button, {\n    style: styles.submitBtn,\n    color: \"#5a5\",\n    title: \"Submit\",\n    onPress: function onPress(e) {\n      if (validate()) {\n        submitRequest();\n      } else {\n        alert(\"Please fill all requiree fields!\");\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 17\n    }\n  })), React.createElement(View, {\n    style: styles.submitBtnWrapper,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 13\n    }\n  }, React.createElement(Button, {\n    style: styles.submitBtn,\n    color: \"#a55\",\n    title: \"Clear\",\n    style: {\n      color: \"#fff\"\n    },\n    onPress: function onPress(e) {\n      setData({});\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 17\n    }\n  })));\n};\nvar styles = StyleSheet.create({\n  box: {\n    margin: 10\n  },\n  formUnit: {\n    marginTop: 5,\n    marginBottom: 15,\n    borderBottomWidth: 1,\n    borderBottomColor: \"rgba(200,200,200,0.2)\"\n  },\n  formUnitTitle: {\n    fontWeight: \"bold\"\n  },\n  formUnitInput: {\n    fontSize: 24\n  },\n  formUnitRequiredTitle: {\n    color: \"red\",\n    fontSize: 18,\n    fontWeight: \"bold\"\n  },\n  submitBtnWrapper: {\n    marginTop: 5,\n    marginBottom: 5,\n    fontSize: 18\n  },\n  submitBtn: {\n    fontSize: 18\n  }\n});","map":null,"metadata":{},"sourceType":"module"}