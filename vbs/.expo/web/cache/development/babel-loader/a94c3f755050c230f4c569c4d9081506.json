{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _excluded = [\"enabled\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport Hammer from '@egjs/hammerjs';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { State } from \"../State\";\nimport { EventMap } from \"./constants\";\nimport * as NodeManager from \"./NodeManager\";\nvar gestureInstances = 0;\n\nvar GestureHandler = function () {\n  function GestureHandler() {\n    var _this = this;\n\n    _classCallCheck(this, GestureHandler);\n\n    _defineProperty(this, \"handlerTag\", void 0);\n\n    _defineProperty(this, \"isGestureRunning\", false);\n\n    _defineProperty(this, \"view\", null);\n\n    _defineProperty(this, \"hasCustomActivationCriteria\", void 0);\n\n    _defineProperty(this, \"hasGestureFailed\", false);\n\n    _defineProperty(this, \"hammer\", null);\n\n    _defineProperty(this, \"initialRotation\", null);\n\n    _defineProperty(this, \"__initialX\", void 0);\n\n    _defineProperty(this, \"__initialY\", void 0);\n\n    _defineProperty(this, \"config\", {});\n\n    _defineProperty(this, \"previousState\", State.UNDETERMINED);\n\n    _defineProperty(this, \"pendingGestures\", {});\n\n    _defineProperty(this, \"oldState\", State.UNDETERMINED);\n\n    _defineProperty(this, \"lastSentState\", null);\n\n    _defineProperty(this, \"gestureInstance\", void 0);\n\n    _defineProperty(this, \"_stillWaiting\", void 0);\n\n    _defineProperty(this, \"propsRef\", void 0);\n\n    _defineProperty(this, \"ref\", void 0);\n\n    _defineProperty(this, \"clearSelfAsPending\", function () {\n      if (Array.isArray(_this.config.waitFor)) {\n        for (var _iterator = _createForOfIteratorHelperLoose(_this.config.waitFor), _step; !(_step = _iterator()).done;) {\n          var gesture = _step.value;\n          gesture.removePendingGesture(_this.id);\n        }\n      }\n    });\n\n    _defineProperty(this, \"destroy\", function () {\n      _this.clearSelfAsPending();\n\n      if (_this.hammer) {\n        _this.hammer.stop(false);\n\n        _this.hammer.destroy();\n      }\n\n      _this.hammer = null;\n    });\n\n    _defineProperty(this, \"isPointInView\", function (_ref) {\n      var x = _ref.x,\n          y = _ref.y;\n\n      var rect = _this.view.getBoundingClientRect();\n\n      var pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      return pointerInside;\n    });\n\n    _defineProperty(this, \"sendEvent\", function (nativeEvent) {\n      var _this$propsRef$curren = _this.propsRef.current,\n          onGestureHandlerEvent = _this$propsRef$curren.onGestureHandlerEvent,\n          onGestureHandlerStateChange = _this$propsRef$curren.onGestureHandlerStateChange;\n\n      var event = _this.transformEventData(nativeEvent);\n\n      invokeNullableMethod(onGestureHandlerEvent, event);\n\n      if (_this.lastSentState !== event.nativeEvent.state) {\n        _this.lastSentState = event.nativeEvent.state;\n        invokeNullableMethod(onGestureHandlerStateChange, event);\n      }\n    });\n\n    _defineProperty(this, \"sync\", function () {\n      var gesture = _this.hammer.get(_this.name);\n\n      if (!gesture) return;\n\n      var enable = function enable(recognizer, inputData) {\n        if (!_this.config.enabled) {\n          _this.isGestureRunning = false;\n          _this.hasGestureFailed = false;\n          return false;\n        }\n\n        if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n          return _this.shouldEnableGestureOnSetup;\n        }\n\n        if (_this.hasGestureFailed) {\n          return false;\n        }\n\n        if (!_this.isDiscrete) {\n          if (_this.isGestureRunning) {\n            return true;\n          }\n\n          _this._stillWaiting = _this._getPendingGestures();\n\n          if (_this._stillWaiting.length) {\n            for (var _iterator2 = _createForOfIteratorHelperLoose(_this._stillWaiting), _step2; !(_step2 = _iterator2()).done;) {\n              var _gesture2 = _step2.value;\n\n              if (!_gesture2.isDiscrete && _gesture2.isGestureRunning) {\n                _this.hasGestureFailed = true;\n                _this.isGestureRunning = false;\n                return false;\n              }\n            }\n\n            return false;\n          }\n        }\n\n        if (!_this.hasCustomActivationCriteria) {\n          return true;\n        }\n\n        var deltaRotation = _this.initialRotation == null ? 0 : inputData.rotation - _this.initialRotation;\n\n        var _this$isGestureEnable = _this.isGestureEnabledForEvent(_this.getConfig(), recognizer, _objectSpread(_objectSpread({}, inputData), {}, {\n          deltaRotation: deltaRotation\n        })),\n            success = _this$isGestureEnable.success,\n            failed = _this$isGestureEnable.failed;\n\n        if (failed) {\n          _this.simulateCancelEvent(inputData);\n\n          _this.hasGestureFailed = true;\n        }\n\n        return success;\n      };\n\n      var params = _this.getHammerConfig();\n\n      gesture.set(_objectSpread(_objectSpread({}, params), {}, {\n        enable: enable\n      }));\n    });\n\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  _createClass(GestureHandler, [{\n    key: \"id\",\n    get: function get() {\n      return \"\".concat(this.name).concat(this.gestureInstance);\n    }\n  }, {\n    key: \"isDiscrete\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.config;\n    }\n  }, {\n    key: \"onWaitingEnded\",\n    value: function onWaitingEnded(_gesture) {}\n  }, {\n    key: \"removePendingGesture\",\n    value: function removePendingGesture(id) {\n      delete this.pendingGestures[id];\n    }\n  }, {\n    key: \"addPendingGesture\",\n    value: function addPendingGesture(gesture) {\n      this.pendingGestures[gesture.id] = gesture;\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_config, _recognizer, _event) {\n      return {\n        success: true\n      };\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.NativeGestureClass');\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(_config) {\n      return true;\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref2) {\n      var _ref2$enabled = _ref2.enabled,\n          enabled = _ref2$enabled === void 0 ? true : _ref2$enabled,\n          props = _objectWithoutProperties(_ref2, _excluded);\n\n      this.clearSelfAsPending();\n      this.config = ensureConfig(_objectSpread({\n        enabled: enabled\n      }, props));\n      this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n\n      if (Array.isArray(this.config.waitFor)) {\n        for (var _iterator3 = _createForOfIteratorHelperLoose(this.config.waitFor), _step3; !(_step3 = _iterator3()).done;) {\n          var gesture = _step3.value;\n          gesture.addPendingGesture(this);\n        }\n      }\n\n      if (this.hammer) {\n        this.sync();\n      }\n\n      return this.config;\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      if (type == 0) {\n        return 0;\n      }\n\n      return EventMap[type];\n    }\n  }, {\n    key: \"transformEventData\",\n    value: function transformEventData(event) {\n      var eventType = event.eventType,\n          numberOfPointers = event.maxPointers;\n      var changedTouch = event.changedPointers[0];\n      var pointerInside = this.isPointInView({\n        x: changedTouch.clientX,\n        y: changedTouch.clientY\n      });\n      var state = this.getState(eventType);\n\n      if (state !== this.previousState) {\n        this.oldState = this.previousState;\n        this.previousState = state;\n      }\n\n      return {\n        nativeEvent: _objectSpread(_objectSpread({\n          numberOfPointers: numberOfPointers,\n          state: state,\n          pointerInside: pointerInside\n        }, this.transformNativeEvent(event)), {}, {\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          oldState: this.oldState\n        }),\n        timeStamp: Date.now()\n      };\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(_event) {\n      return {};\n    }\n  }, {\n    key: \"cancelPendingGestures\",\n    value: function cancelPendingGestures(event) {\n      for (var _i = 0, _Object$values = Object.values(this.pendingGestures); _i < _Object$values.length; _i++) {\n        var gesture = _Object$values[_i];\n\n        if (gesture && gesture.isGestureRunning) {\n          gesture.hasGestureFailed = true;\n          gesture.cancelEvent(event);\n        }\n      }\n    }\n  }, {\n    key: \"notifyPendingGestures\",\n    value: function notifyPendingGestures() {\n      for (var _i2 = 0, _Object$values2 = Object.values(this.pendingGestures); _i2 < _Object$values2.length; _i2++) {\n        var gesture = _Object$values2[_i2];\n\n        if (gesture) {\n          gesture.onWaitingEnded(this);\n        }\n      }\n    }\n  }, {\n    key: \"onGestureEnded\",\n    value: function onGestureEnded(event) {\n      this.isGestureRunning = false;\n      this.cancelPendingGestures(event);\n    }\n  }, {\n    key: \"forceInvalidate\",\n    value: function forceInvalidate(event) {\n      if (this.isGestureRunning) {\n        this.hasGestureFailed = true;\n        this.cancelEvent(event);\n      }\n    }\n  }, {\n    key: \"cancelEvent\",\n    value: function cancelEvent(event) {\n      this.notifyPendingGestures();\n      this.sendEvent(_objectSpread(_objectSpread({}, event), {}, {\n        eventType: Hammer.INPUT_CANCEL,\n        isFinal: true\n      }));\n      this.onGestureEnded(event);\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(_ref3) {\n      var isFirst = _ref3.isFirst;\n\n      if (isFirst) {\n        this.hasGestureFailed = false;\n      }\n    }\n  }, {\n    key: \"setView\",\n    value: function setView(ref, propsRef) {\n      var _this2 = this;\n\n      if (ref == null) {\n        this.destroy();\n        this.view = null;\n        return;\n      }\n\n      this.propsRef = propsRef;\n      this.ref = ref;\n      this.view = findNodeHandle(ref);\n      this.hammer = new Hammer.Manager(this.view);\n      this.oldState = State.UNDETERMINED;\n      this.previousState = State.UNDETERMINED;\n      this.lastSentState = null;\n      var NativeGestureClass = this.NativeGestureClass;\n      var gesture = new NativeGestureClass(this.getHammerConfig());\n      this.hammer.add(gesture);\n      this.hammer.on('hammer.input', function (ev) {\n        if (!_this2.config.enabled) {\n          _this2.hasGestureFailed = false;\n          _this2.isGestureRunning = false;\n          return;\n        }\n\n        _this2.onRawEvent(ev);\n\n        if (_this2.initialRotation === null && ev.rotation !== 0) {\n          _this2.initialRotation = ev.rotation;\n        }\n\n        if (ev.isFinal) {\n          setTimeout(function () {\n            _this2.initialRotation = null;\n            _this2.hasGestureFailed = false;\n          });\n        }\n      });\n      this.setupEvents();\n      this.sync();\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {\n      var _this3 = this;\n\n      if (!this.isDiscrete) {\n        this.hammer.on(\"\".concat(this.name, \"start\"), function (event) {\n          return _this3.onStart(event);\n        });\n        this.hammer.on(\"\".concat(this.name, \"end \").concat(this.name, \"cancel\"), function (event) {\n          _this3.onGestureEnded(event);\n        });\n      }\n\n      this.hammer.on(this.name, function (ev) {\n        return _this3.onGestureActivated(ev);\n      });\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart(_ref4) {\n      var deltaX = _ref4.deltaX,\n          deltaY = _ref4.deltaY,\n          rotation = _ref4.rotation;\n      this.oldState = State.UNDETERMINED;\n      this.previousState = State.UNDETERMINED;\n      this.lastSentState = null;\n      this.isGestureRunning = true;\n      this.__initialX = deltaX;\n      this.__initialY = deltaY;\n      this.initialRotation = rotation;\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      this.sendEvent(ev);\n    }\n  }, {\n    key: \"onSuccess\",\n    value: function onSuccess() {}\n  }, {\n    key: \"_getPendingGestures\",\n    value: function _getPendingGestures() {\n      if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n        var stillWaiting = this.config.waitFor.filter(function (_ref5) {\n          var hasGestureFailed = _ref5.hasGestureFailed;\n          return hasGestureFailed === false;\n        });\n        return stillWaiting;\n      }\n\n      return [];\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      var pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n      return {\n        pointers: pointers\n      };\n    }\n  }, {\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(_inputData) {}\n  }]);\n\n  return GestureHandler;\n}();\n\nfunction invokeNullableMethod(method, event) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n        var handler = method.__getHandler();\n\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          var argMapping = method.__nodeConfig.argMapping;\n\n          if (Array.isArray(argMapping)) {\n            for (var index in argMapping) {\n              var _argMapping$index = _slicedToArray(argMapping[index], 2),\n                  key = _argMapping$index[0],\n                  value = _argMapping$index[1];\n\n              if (key in event.nativeEvent) {\n                var nativeValue = event.nativeEvent[key];\n\n                if (value && value.setValue) {\n                  value.setValue(nativeValue);\n                } else {\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction ensureConfig(config) {\n  var props = _objectSpread({}, config);\n\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist * props.minDist;\n  }\n\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity * props.minVelocity;\n  }\n\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist * config.maxDist;\n  }\n\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor).map(function (_ref6) {\n      var handlerTag = _ref6.handlerTag;\n      return NodeManager.getHandler(handlerTag);\n    }).filter(function (v) {\n      return v;\n    });\n  } else {\n    props.waitFor = null;\n  }\n\n  var configProps = ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'];\n  configProps.forEach(function (prop) {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props;\n}\n\nfunction asArray(value) {\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;","map":null,"metadata":{},"sourceType":"module"}