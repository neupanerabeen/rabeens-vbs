{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport AnimatedEvent from \"./AnimatedEvent\";\nimport { createOrReuseStyleNode } from \"./AnimatedStyle\";\nimport invariant from 'fbjs/lib/invariant';\nimport deepEqual from 'fbjs/lib/areEqual';\nimport { val } from \"../val\";\n\nfunction sanitizeProps(inputProps) {\n  var props;\n\n  for (var key in inputProps) {\n    var value = inputProps[key];\n\n    if (value instanceof AnimatedNode && !(value instanceof AnimatedEvent)) {\n      if (props === undefined) {\n        props = {};\n      }\n\n      props[key] = value.__nodeID;\n    }\n  }\n\n  return props;\n}\n\nexport function createOrReusePropsNode(props, callback, oldNode) {\n  if (props.style) {\n    var style = createOrReuseStyleNode(props.style, oldNode && oldNode._props.style);\n\n    if (style) {\n      props = _objectSpread(_objectSpread({}, props), {}, {\n        style: style\n      });\n    }\n  }\n\n  var config = sanitizeProps(props);\n\n  if (config === undefined) {\n    return undefined;\n  }\n\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n\n  return new AnimatedProps(props, config, callback);\n}\n\nvar AnimatedProps = function (_AnimatedNode) {\n  _inherits(AnimatedProps, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedProps);\n\n  function AnimatedProps(props, config, callback) {\n    var _this;\n\n    _classCallCheck(this, AnimatedProps);\n\n    _this = _super.call(this, {\n      type: 'props',\n      props: config\n    }, Object.values(props).filter(function (n) {\n      return !(n instanceof AnimatedEvent);\n    }));\n    _this._config = config;\n    _this._props = props;\n    _this._callback = callback;\n\n    _this.__attach();\n\n    return _this;\n  }\n\n  _createClass(AnimatedProps, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedProps, id: \" + this.__nodeID;\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var props = {};\n\n      for (var key in this._props) {\n        var value = this._props[key];\n\n        if (value instanceof AnimatedNode) {\n          props[key] = value.__getValue();\n        }\n      }\n\n      return props;\n    }\n  }, {\n    key: \"__detach\",\n    value: function __detach() {\n      var nativeViewTag = findNodeHandle(this._animatedView);\n      invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');\n\n      this._disconnectAnimatedView(nativeViewTag);\n\n      _get(_getPrototypeOf(AnimatedProps.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this._callback();\n\n      if (!this._animatedView) {\n        return;\n      }\n\n      val(this);\n    }\n  }, {\n    key: \"setNativeView\",\n    value: function setNativeView(animatedView) {\n      if (this._animatedView === animatedView) {\n        return;\n      }\n\n      this._animatedView = animatedView;\n      var nativeViewTag = findNodeHandle(this._animatedView);\n      invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');\n\n      this._connectAnimatedView(nativeViewTag);\n    }\n  }]);\n\n  return AnimatedProps;\n}(AnimatedNode);","map":null,"metadata":{},"sourceType":"module"}