{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport interpolateNode, { Extrapolate } from \"../reanimated1/derived/interpolate\";\n\nfunction getVal(config) {\n  'worklet';\n\n  var type = config.type,\n      coef = config.coef,\n      val = config.val,\n      ll = config.ll,\n      rr = config.rr,\n      x = config.x;\n\n  switch (type) {\n    case Extrapolate.IDENTITY:\n      return x;\n\n    case Extrapolate.CLAMP:\n      if (coef * val < coef * ll) {\n        return ll;\n      }\n\n      return rr;\n\n    case Extrapolate.EXTEND:\n    default:\n      return val;\n  }\n}\n\nfunction isExtrapolate(value) {\n  'worklet';\n\n  return value === Extrapolate.EXTEND || value === Extrapolate.CLAMP || value === Extrapolate.IDENTITY;\n}\n\nfunction validateType(type) {\n  'worklet';\n\n  var EXTRAPOLATE_ERROR_MSG = \"Reanimated: config object is not valid, please provide valid config, for example:\\n    interpolate(value, [inputRange], [outputRange], {\\n    extrapolateLeft: 'clamp',\\n    extrapolateRight: 'extend',\\n  })\";\n\n  var EXTRAPOLATE_ERROR = function EXTRAPOLATE_ERROR(extrapolate) {\n    return \"Reanimated: not supported value for \\\"\" + extrapolate + \"\\\" \\nSupported values: [\\\"extend\\\", \\\"clamp\\\", \\\"identity\\\"]\\n Valid example:\\n    interpolate(value, [inputRange], [outputRange], {\\n      \" + extrapolate + \": 'clamp',\\n  })\";\n  };\n\n  type = type !== null && type !== void 0 ? type : 'extend';\n  var hasExtrapolateLeft = type.hasOwnProperty('extrapolateLeft');\n  var hasExtrapolateRight = type.hasOwnProperty('extrapolateRight');\n\n  if (typeof type === 'object' && (Object.keys(type).length === 2 && !(hasExtrapolateLeft && hasExtrapolateRight) || Object.keys(type).length === 1 && !(hasExtrapolateLeft || hasExtrapolateRight) || Object.keys(type).length > 2)) {\n    throw new Error(EXTRAPOLATE_ERROR_MSG);\n  }\n\n  if (typeof type === 'object') {\n    if (hasExtrapolateLeft && !isExtrapolate(type.extrapolateLeft)) {\n      throw new Error(EXTRAPOLATE_ERROR('extrapolateLeft'));\n    }\n\n    if (hasExtrapolateRight && !isExtrapolate(type.extrapolateRight)) {\n      throw new Error(EXTRAPOLATE_ERROR('extrapolateRight'));\n    }\n  }\n\n  if (typeof type === 'string' && !isExtrapolate(type)) {\n    throw new Error(\"Reanimated: not supported value for \\\"interpolate\\\" \\nSupported values: [\\\"extend\\\", \\\"clamp\\\", \\\"identity\\\"]\\n Valid example:\\n       interpolate(value, [inputRange], [outputRange], \\\"clamp\\\")\");\n  }\n}\n\nfunction internalInterpolate(x, l, r, ll, rr, type) {\n  'worklet';\n\n  if (r - l === 0) return ll;\n  var progress = (x - l) / (r - l);\n  var val = ll + progress * (rr - ll);\n  var coef = rr >= ll ? 1 : -1;\n  var config = {\n    type: type,\n    coef: coef,\n    val: val,\n    ll: ll,\n    rr: rr,\n    x: x\n  };\n  validateType(type);\n\n  if (typeof type === 'object') {\n    if (coef * val < coef * ll) {\n      return getVal(_extends(config, {\n        type: type.extrapolateLeft\n      }));\n    } else if (coef * val > coef * ll) {\n      return getVal(_extends(config, {\n        type: type.extrapolateRight\n      }));\n    }\n  }\n\n  if (coef * val < coef * ll || coef * val > coef * rr) {\n    return getVal(config);\n  }\n\n  return val;\n}\n\nexport function interpolate(x, input, output, type) {\n  'worklet';\n\n  if (x && x.__nodeID) {\n    console.warn(\"interpolate() was renamed to interpolateNode() in Reanimated 2. Please use interpolateNode() instead\");\n    return interpolateNode.apply(undefined, arguments);\n  }\n\n  var length = input.length;\n  var narrowedInput = [];\n\n  if (x < input[0]) {\n    narrowedInput = [input[0], input[1], output[0], output[1]];\n  } else if (x > input[length - 1]) {\n    narrowedInput = [input[length - 2], input[length - 1], output[length - 2], output[length - 1]];\n  } else {\n    for (var i = 1; i < length; ++i) {\n      if (x <= input[i]) {\n        narrowedInput = [input[i - 1], input[i], output[i - 1], output[i]];\n        break;\n      }\n    }\n  }\n\n  return internalInterpolate.apply({}, [x].concat(narrowedInput).concat(type));\n}","map":null,"metadata":{},"sourceType":"module"}