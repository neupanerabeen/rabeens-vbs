{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport AnimatedNode from \"./AnimatedNode\";\nimport invariant from 'fbjs/lib/invariant';\nimport { val } from \"../val\";\nimport { adapt } from \"../core/AnimatedBlock\";\n\nvar AnimatedSet = function (_AnimatedNode) {\n  _inherits(AnimatedSet, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedSet);\n\n  function AnimatedSet(what, value) {\n    var _this;\n\n    _classCallCheck(this, AnimatedSet);\n\n    invariant(what instanceof AnimatedNode, \"Reanimated: Animated.set first argument should be of type AnimatedNode but got \" + what);\n    invariant(value instanceof AnimatedNode, \"Reanimated: Animated.set second argument should be of type AnimatedNode, String or Number but got \" + value);\n    _this = _super.call(this, {\n      type: 'set',\n      what: what,\n      value: value\n    }, [value]);\n    invariant(!what._constant, 'Value to be set cannot be constant');\n    _this._what = what;\n    _this._value = value;\n    return _this;\n  }\n\n  _createClass(AnimatedSet, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedSet, id: \" + this.__nodeID;\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var newValue = val(this._value);\n\n      this._what.setValue(newValue);\n\n      return newValue;\n    }\n  }]);\n\n  return AnimatedSet;\n}(AnimatedNode);\n\nexport function createAnimatedSet(what, value) {\n  return new AnimatedSet(what, adapt(value));\n}","map":null,"metadata":{},"sourceType":"module"}