{"ast":null,"code":"import NativeReanimated from \"./NativeReanimated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { addWhitelistedNativeProps } from \"../ConfigHelper\";\n\nglobal.__reanimatedWorkletInit = function (worklet) {\n  worklet.__worklet = true;\n};\n\nif (global._setGlobalConsole === undefined) {\n  global._setGlobalConsole = function () {};\n}\n\nvar testWorklet = function testWorklet() {\n  'worklet';\n};\n\nexport var checkPluginState = function checkPluginState() {\n  var throwError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n  if (!testWorklet.__workletHash && !process.env.JEST_WORKER_ID) {\n    if (throwError) {\n      throw new Error(\"Reanimated 2 failed to create a worklet, maybe you forgot to add Reanimated's babel plugin?\");\n    }\n\n    return false;\n  }\n\n  return true;\n};\nexport var isConfigured = function isConfigured() {\n  var throwError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  return checkPluginState(throwError) && !NativeReanimated.useOnlyV1;\n};\nexport var isConfiguredCheck = function isConfiguredCheck() {\n  if (!isConfigured(true)) {\n    throw new Error('If you want to use Reanimated 2 then go through our installation steps https://docs.swmansion.com/react-native-reanimated/docs/installation');\n  }\n};\n\nfunction _toArrayReanimated(object) {\n  'worklet';\n\n  if (Array.isArray(object)) {\n    return object;\n  }\n\n  if (typeof Symbol !== 'undefined' && (typeof Symbol === 'function' ? Symbol.iterator : '@@iterator') in Object(object)) return Array.from(object);\n  throw new 'Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'();\n}\n\nfunction _mergeObjectsReanimated() {\n  'worklet';\n\n  return Object.assign.apply(null, arguments);\n}\n\nglobal.__reanimatedWorkletInit = function (worklet) {\n  worklet.__worklet = true;\n\n  if (worklet._closure) {\n    var closure = worklet._closure;\n    Object.keys(closure).forEach(function (key) {\n      if (key === '_toConsumableArray') {\n        closure[key] = _toArrayReanimated;\n      }\n\n      if (key === '_objectSpread') {\n        closure[key] = _mergeObjectsReanimated;\n      }\n    });\n  }\n};\n\nfunction pushFrame(frame) {\n  NativeReanimated.pushFrame(frame);\n}\n\nexport function requestFrame(frame) {\n  'worklet';\n\n  if (NativeReanimated.native) {\n    requestAnimationFrame(frame);\n  } else {\n    pushFrame(frame);\n  }\n}\nglobal._WORKLET = false;\n\nglobal._log = function (s) {\n  console.log(s);\n};\n\nexport function runOnUI(worklet) {\n  return makeShareable(worklet);\n}\nexport function makeShareable(value) {\n  isConfiguredCheck();\n  return NativeReanimated.makeShareable(value);\n}\nexport function getViewProp(viewTag, propName) {\n  return new Promise(function (resolve, reject) {\n    return NativeReanimated.getViewProp(viewTag, propName, function (result) {\n      if (result.substr(0, 6) === 'error:') {\n        reject(result);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n}\n\nvar _getTimestamp;\n\nif (process.env.JEST_WORKER_ID) {\n  _getTimestamp = function _getTimestamp() {\n    return Date.now();\n  };\n} else {\n  _getTimestamp = function _getTimestamp() {\n    'worklet';\n\n    if (_frameTimestamp) {\n      return _frameTimestamp;\n    }\n\n    if (_eventTimestamp) {\n      return _eventTimestamp;\n    }\n\n    return _getCurrentTime();\n  };\n}\n\nexport function getTimestamp() {\n  'worklet';\n\n  if (Platform.OS === 'web') {\n    return NativeReanimated.getTimestamp();\n  }\n\n  return _getTimestamp();\n}\n\nfunction workletValueSetter(value) {\n  'worklet';\n\n  var _this = this;\n\n  var previousAnimation = this._animation;\n\n  if (previousAnimation) {\n    previousAnimation.cancelled = true;\n    this._animation = null;\n  }\n\n  if (typeof value === 'function' || value !== null && typeof value === 'object' && value.onFrame) {\n    var animation = typeof value === 'function' ? value() : value;\n\n    if (this._value === animation.current && !animation.isHigherOrder) {\n      return;\n    }\n\n    var initializeAnimation = function initializeAnimation(timestamp) {\n      animation.onStart(animation, _this.value, timestamp, previousAnimation);\n    };\n\n    initializeAnimation(getTimestamp());\n\n    var step = function step(timestamp) {\n      if (animation.cancelled) {\n        animation.callback && animation.callback(false);\n        return;\n      }\n\n      var finished = animation.onFrame(animation, timestamp);\n      animation.timestamp = timestamp;\n      _this._value = animation.current;\n\n      if (finished) {\n        animation.callback && animation.callback(true);\n      } else {\n        requestAnimationFrame(step);\n      }\n    };\n\n    this._animation = animation;\n\n    if (_frameTimestamp) {\n      step(_frameTimestamp);\n    } else {\n      requestAnimationFrame(step);\n    }\n  } else {\n    if (this._value === value) {\n      return;\n    }\n\n    this._value = value;\n  }\n}\n\nfunction workletValueSetterJS(value) {\n  var _this2 = this;\n\n  var previousAnimation = this._animation;\n\n  if (previousAnimation) {\n    previousAnimation.cancelled = true;\n    this._animation = null;\n  }\n\n  if (typeof value === 'function' || value !== null && typeof value === 'object' && value.onFrame) {\n    var animation = typeof value === 'function' ? value() : value;\n\n    var initializeAnimation = function initializeAnimation(timestamp) {\n      animation.onStart(animation, _this2.value, timestamp, previousAnimation);\n    };\n\n    var step = function step(timestamp) {\n      if (animation.cancelled) {\n        animation.callback && animation.callback(false);\n        return;\n      }\n\n      if (initializeAnimation) {\n        initializeAnimation(timestamp);\n        initializeAnimation = null;\n      }\n\n      var finished = animation.onFrame(animation, timestamp);\n      animation.timestamp = timestamp;\n\n      _this2._setValue(animation.current);\n\n      if (finished) {\n        animation.callback && animation.callback(true);\n      } else {\n        requestFrame(step);\n      }\n    };\n\n    this._animation = animation;\n    requestFrame(step);\n  } else {\n    this._setValue(value);\n  }\n}\n\nexport function makeMutable(value) {\n  isConfiguredCheck();\n  return NativeReanimated.makeMutable(value);\n}\nexport function makeRemote() {\n  var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  isConfiguredCheck();\n  return NativeReanimated.makeRemote(object);\n}\nexport function startMapper(mapper) {\n  var inputs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var outputs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  isConfiguredCheck();\n  return NativeReanimated.startMapper(mapper, inputs, outputs);\n}\nexport function stopMapper(mapperId) {\n  NativeReanimated.stopMapper(mapperId);\n}\nexport var runOnJS = function runOnJS(fun) {\n  'worklet';\n\n  if (!_WORKLET) {\n    return fun;\n  }\n\n  if (!fun.__callAsync) {\n    throw new Error(\"Attempting to call runOnJS with an object that is not a host function. Using runOnJS is only possible with methods that are defined on the main React-Native Javascript thread and that aren't marked as worklets\");\n  } else {\n    return fun.__callAsync;\n  }\n};\nexport function createAnimatedPropAdapter(adapter, nativeProps) {\n  var nativePropsToAdd = {};\n  nativeProps === null || nativeProps === void 0 ? void 0 : nativeProps.forEach(function (prop) {\n    nativePropsToAdd[prop] = true;\n  });\n  addWhitelistedNativeProps(nativePropsToAdd);\n  return adapter;\n}\n\nif (!NativeReanimated.useOnlyV1) {\n  NativeReanimated.installCoreFunctions(NativeReanimated.native ? workletValueSetter : workletValueSetterJS);\n  var capturableConsole = console;\n  isConfigured() && runOnUI(function () {\n    'worklet';\n\n    var console = {\n      debug: runOnJS(capturableConsole.debug),\n      log: runOnJS(capturableConsole.log),\n      warn: runOnJS(capturableConsole.warn),\n      error: runOnJS(capturableConsole.error),\n      info: runOnJS(capturableConsole.info)\n    };\n\n    _setGlobalConsole(console);\n  })();\n}","map":null,"metadata":{},"sourceType":"module"}