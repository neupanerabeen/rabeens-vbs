{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport invariant from 'fbjs/lib/invariant';\nimport { val } from \"../val\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport InternalAnimatedValue from \"./InternalAnimatedValue\";\n\nvar AnimatedBlock = function (_AnimatedNode) {\n  _inherits(AnimatedBlock, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedBlock);\n\n  function AnimatedBlock(array) {\n    var _this;\n\n    _classCallCheck(this, AnimatedBlock);\n\n    invariant(array.every(function (el) {\n      return el instanceof AnimatedNode;\n    }), \"Reanimated: Animated.block node argument should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes\");\n    _this = _super.call(this, {\n      type: 'block',\n      block: array\n    }, array);\n    _this._array = array;\n    return _this;\n  }\n\n  _createClass(AnimatedBlock, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedBlock, id: \" + this.__nodeID;\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var result;\n\n      this._array.forEach(function (node) {\n        result = val(node);\n      });\n\n      return result;\n    }\n  }]);\n\n  return AnimatedBlock;\n}(AnimatedNode);\n\nexport function createAnimatedBlock(items) {\n  return adapt(items);\n}\n\nfunction nodify(v) {\n  if (typeof v === 'object' && v != null && v.__isProxy) {\n    if (!v.__val) {\n      v.__val = new InternalAnimatedValue(0);\n    }\n\n    return v.__val;\n  }\n\n  return v instanceof AnimatedNode ? v : InternalAnimatedValue.valueForConstant(v);\n}\n\nexport function adapt(v) {\n  return Array.isArray(v) ? new AnimatedBlock(v.map(function (node) {\n    return adapt(node);\n  })) : nodify(v);\n}","map":null,"metadata":{},"sourceType":"module"}