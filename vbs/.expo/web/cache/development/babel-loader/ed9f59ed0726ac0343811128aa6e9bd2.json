{"ast":null,"code":"import { cond, sub, divide, multiply, add, block, set, greaterOrEq, proc } from \"../base\";\nvar internalTiming = proc(function (clock, time, frameTime, position, finished, toValue, duration, nextProgress, progress, newFrameTime) {\n  var state = {\n    time: time,\n    finished: finished,\n    frameTime: frameTime,\n    position: position\n  };\n  var config = {\n    duration: duration,\n    toValue: toValue\n  };\n  var distanceLeft = sub(config.toValue, state.position);\n  var fullDistance = divide(distanceLeft, sub(1, progress));\n  var startPosition = sub(config.toValue, fullDistance);\n  var nextPosition = add(startPosition, multiply(fullDistance, nextProgress));\n  return block([cond(greaterOrEq(newFrameTime, config.duration), [set(state.position, config.toValue), set(state.finished, 1)], set(state.position, nextPosition)), set(state.frameTime, newFrameTime), set(state.time, clock)]);\n});\nexport default function timing(clock, state, config) {\n  if (config.duration === 0) {\n    return block([set(state.position, config.toValue), set(state.finished, 1)]);\n  }\n\n  var lastTime = cond(state.time, state.time, clock);\n  var newFrameTime = add(state.frameTime, sub(clock, lastTime));\n  var nextProgress = config.easing(divide(newFrameTime, config.duration));\n  var progress = config.easing(divide(state.frameTime, config.duration));\n  return internalTiming(clock, state.time, state.frameTime, state.position, state.finished, config.toValue, config.duration, nextProgress, progress, newFrameTime);\n}","map":null,"metadata":{},"sourceType":"module"}